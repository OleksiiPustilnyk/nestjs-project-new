// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Items {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String       @unique
  price        Float
  color        String
  category     String
  description  String
  img          String
  isOnSale     Boolean      @default(false)
  availability Availibility
  reviews      Review[]
  createdAt    DateTime     @default(now())
  updateAt     DateTime     @updatedAt
  tags         String[]
}

model Review {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String
  rating  Int
  Items   Items?  @relation(fields: [itemsId], references: [id])
  itemsId String? @db.ObjectId
}

enum Availibility {
  IN_STORE
  ONLINE
}

// model Address {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   name       String
//   surname    String
//   city       String
//   address    String
//   postalCode String
//   phone      String
//   isDefault  Boolean? @default(false)
//   tags       String[]
//   user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId     String?  @db.ObjectId
// }

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  surname       String?
  phone         String?
  // address       Address[]
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // selectedItems SelectedItem[]
  // order         Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
